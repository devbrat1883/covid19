{
	"name": "df_transform_testing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_testing",
						"type": "DatasetReference"
					},
					"name": "testingsource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookup"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "Dimdatesource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_testing",
						"type": "DatasetReference"
					},
					"name": "testingsink",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_covidreportingdl",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "SelectOnlyRequiredFields"
				},
				{
					"name": "LookupCountry"
				},
				{
					"name": "SelectForSink"
				},
				{
					"name": "DeriveECDCYearWeek"
				},
				{
					"name": "AggDimDate"
				},
				{
					"name": "JoinwithDate"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as date 'yyyy-MM',",
				"          level as string,",
				"          region as string,",
				"          region_name as string,",
				"          new_cases as string,",
				"          tests_done as string,",
				"          population as string,",
				"          testing_rate as string,",
				"          positivity_rate as string,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> testingsource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookup",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as date 'yyyy-MM'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Dimdatesource",
				"testingsource select(mapColumn(",
				"          country,",
				"          country_code,",
				"          year_week,",
				"          level,",
				"          region,",
				"          region_name,",
				"          new_cases,",
				"          tests_done,",
				"          population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyRequiredFields",
				"SelectOnlyRequiredFields, CountryLookup lookup(SelectOnlyRequiredFields@country == CountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountry",
				"JoinwithDate select(mapColumn(",
				"          country = SelectOnlyRequiredFields@country,",
				"          country_code,",
				"          year_week,",
				"          new_cases,",
				"          tests_done,",
				"          population = SelectOnlyRequiredFields@population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source,",
				"          country = CountryLookup@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population = CountryLookup@population,",
				"          ecdc_year_week,",
				"          week_start_date,",
				"          week_end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForSink",
				"Dimdatesource derive(ecdc_year_week = toDate(year + '-W' + lpad(week_of_year, 2, '0'))) ~> DeriveECDCYearWeek",
				"select1 aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggDimDate",
				"LookupCountry, AggDimDate join(year_week == ecdc_year_week,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinwithDate",
				"DeriveECDCYearWeek select(mapColumn(",
				"          date_key,",
				"          date,",
				"          year,",
				"          month,",
				"          day,",
				"          day_name,",
				"          day_of_year,",
				"          week_of_month,",
				"          week_of_year,",
				"          month_name,",
				"          year_month,",
				"          year_week,",
				"          ecdc_year_week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"SelectForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as string,",
				"          tests_done as string,",
				"          population as string,",
				"          testing_rate as string,",
				"          positivity_rate as string,",
				"          testing_data_source as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          ecdc_year_week as string,",
				"          week_start_date as string,",
				"          week_end_date as string",
				"     ),",
				"     partitionFileNames:['testing.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> testingsink"
			]
		}
	}
}