{
	"name": "df_transform_cases_deaths_test",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "df_raw_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeathsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "casesAndDeathSink"
				}
			],
			"transformations": [
				{
					"name": "FilterEuropeOnly"
				},
				{
					"name": "SelectOnlyRequiredFields"
				},
				{
					"name": "PivotCounts"
				},
				{
					"name": "LookupCountry"
				},
				{
					"name": "SelectForSink"
				},
				{
					"name": "typecastweeklycount"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as string,",
				"          indicator as string,",
				"          weekly_count as string,",
				"          year_week as string,",
				"          rate_14_day as string,",
				"          cumulative_count as string,",
				"          source as string,",
				"          note as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> CasesAndDeathsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookup",
				"CasesAndDeathsSource filter(continent == 'Europe' && not(isNull(country_code))) ~> FilterEuropeOnly",
				"FilterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          weekly_count,",
				"          source,",
				"          each(match(name=='year_week'),",
				"               'reported'+'_week' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectOnlyRequiredFields",
				"typecastweeklycount pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_week),",
				"     pivotBy(indicator, ['cases', 'deaths']),",
				"     weekly_count = sum(weekly_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotCounts",
				"PivotCounts, CountryLookup lookup(PivotCounts@country == CountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountry",
				"LookupCountry select(mapColumn(",
				"          country = PivotCounts@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = PivotCounts@population,",
				"          reported_week,",
				"          cases_weekly_count,",
				"          deaths_weekly_count,",
				"          country = CountryLookup@country,",
				"          continent",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForSink",
				"SelectOnlyRequiredFields derive(country_code = country_code,",
				"          country = country,",
				"          reported_week = reported_week,",
				"          weekly_count = case(isNan(toInteger(weekly_count)),toInteger(weekly_count),toInteger(weekly_count)),",
				"          indicator = indicator,",
				"          source = source,",
				"          population = population) ~> typecastweeklycount",
				"SelectForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['cases_and_deaths.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> casesAndDeathSink"
			]
		}
	}
}